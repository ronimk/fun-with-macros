This third version includes accepting states that can consume streams, and wildcards.

Now:
(setf traffic-lights
  (automaton
    (:wildcard ?)
    red
     (red :    (y → yellow))
     (yellow : (g → green))
     (green :  accept
               (? -> red) ) ) )
Creates a valid automaton which has an accepting state (green), even if it is a bit silly.
If the 'green' state reads in any other stream object, the control gets transformed to the 'red' state.
'? works as a wildcard that matches any stream object.

The automaton macro expands the above description of an automaton into a labels-block which returns the red function when evaluated:

(labels ((red (stream)
           (cond
             ((null stream) the-false-value)
             (T
              (case (first stream)
                ((y) (yellow (rest stream)))
                (otherwise the-false-value) ) ) ) )
         (yellow (stream)
           (cond
             ((null stream) the-false-value)
             (T
              (case (first stream)
                ((g) (green (rest stream)))
                (otherwise the-false-value) ) ) ) )
         (green (stream)
           (cond
             ((null stream) the-truth-value)
             (T
              (case (first stream)
                (otherwise (red (rest stream))) ) ) ) ) ))

NOTE: This is the initial solution, so the source code is still a bit of a mess. It will be cleaned up and tested some more in the future.
For example, at the moment, the wildcard rule checker has been hard-coded into the transform-rules function. It would be better
to look up the actual transformation rule function for any special transformation rule. That way, new transformation rules could be
added in a much more maneagable fashion.

