The fourth version will have two major revisions:

1. A 'choice' is introduced to a state transformation rule that can be used to
   direct multipledifferent stream symbols into the same destination state from
   one source state.
   
2. The main rule transformation function will be divided into two parts:
      
      The first part the looks up the rule transformation operation
      and switches the control to the appropriate rule transformer.
      After the rule transformer has finished its job, the main
      transformation function will combine the transformed rule
      with the rest of the transformed rules for a given state.
      
      The second part consists of a lookup table of rule transformers
      that can be used to transform a given transformation rule of a
      given state into a proper Common Lisp code. So far there will be
      three such transformers:
        a wildcard transformer
        a choice transformer
        and a generic fallback transformer.

At the moment the general idea has been designed and programmed, but the system is still incomplete.
It lacks the choice rule, more thorough testing and proper documenting.

Also, currently the system is designed to strictly handle deterinistic automata through the use of
Common Lisp case-syntax. In order to get the system to also simulate nondetermministic automata,
some major revisions for the creation of the automata code is in order.
