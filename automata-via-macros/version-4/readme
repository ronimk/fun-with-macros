The fourth version has two major revisions:

1. A 'choice' is introduced to a state transformation rule that can be used to
   direct multipledifferent stream symbols into the same destination state from
   one source state.
   
2. The main rule transformation function will be divided into two parts:
      
      The first part looks up the rule transformation operation
      and switches the control to the appropriate rule transformer.
      After the rule transformer has finished its job, the main
      transformation function will combine the transformed rule
      with the rest of the transformed rules for a given state.
      
      The second part consists of a lookup table of rule transformers
      that can be used to transform a given transformation rule of a
      given state into a proper Common Lisp code. So far there will be
      three such transformers:
        a wildcard transformer
        a choice transformer
        and a generic fallback transformer.
        
Now:
(setf traffic-lights
  (automaton
    (:wildcard *)
    red
     (red :    (y → yellow))
     (yellow : (g → green))
     (green :  accept
               ((r y g) -> red) ) ) )
Creates a valid automaton which has an accepting state (green).
If the 'green' state reads in any other valid stream symbol (r y or g), the control gets transformed to the 'red' state.
The symbol * works as a wildcard that matches any stream symbol.

The choice rule is always of the form
((symbol-1 symbol-2 symbol-3 ... symbol-n) -> destination)

or in kleene star notation:
(({symbol}*) -> destination)

Neither wildcards, nested choices nor any other special rules should be used in place of any symbol-i.

The automaton macro expands the above description of an automaton into a labels-block which returns the red function when evaluated:

(labels ((red (stream)
           (cond
             ((null stream) the-false-value)
             (T
              (case (first stream)
                ((y) (yellow (rest stream)))
                (otherwise the-false-value) ) ) ) )
         (yellow (stream)
           (cond
             ((null stream) the-false-value)
             (T
              (case (first stream)
                ((g) (green (rest stream)))
                (otherwise the-false-value) ) ) ) )
         (green (stream)
           (cond
             ((null stream) the-truth-value)
             (T
              (case (first stream)
                ((r) (red (rest stream)))
                ((y) (red (rest stream)))
                ((g) (red (rest stream))) ) ) ) ) ))

New rule transformer objects (RTOs) can be installed to the system via rule-installer.

A bit more throrough testing is still necessary, otherwise this version is complete.

Currently the system is designed to handle only deterinistic automata through the use of
Common Lisp case-syntax. In order to get the system to also simulate nondetermministic automata,
some major revisions for the creation of the automata code is in order.
